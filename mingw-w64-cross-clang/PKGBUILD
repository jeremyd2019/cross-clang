declare -g -A _cross_arches=(
  ["/clang64"]="x86_64-w64-mingw32"
  ["/clang32"]="i686-w64-mingw32"
  ["/clangarm64"]="aarch64-w64-mingw32"
)
pkgbase=mingw-w64-cross-clang
pkgname=($(for _pfx in "${!_cross_arches[@]}"; do
             if [[ "${_pfx}" != "${MINGW_PREFIX}" ]]; then
               echo "${MINGW_PACKAGE_PREFIX}-cross-clang-${_cross_arches[$_pfx]%%-*}"
             fi
           done))
pkgver=12.0.0
pkgrel=5
arch=('any')
mingw_arch=('clang64' 'clang32' 'clangarm64')
license=('ISC')
makedepends=("${MINGW_PACKAGE_PREFIX}-clang=${pkgver}-${pkgrel}")
source=("native-wrapper.h"
        "windres-wrapper.c"
        "windres.LICENSE")
sha256sums=('c9758342cb926605cd1b30ccb92e6b47f5cc930a15904462e0445959f9be49c1'
            'f41a37514ccfaefb7220bd4b01c42344a7b27b093f58e460c352eb46884b7e18'
            '07368fd2805f45f706a5f63051e161989e97bd150731ee88976a04edd8546d54')
build() {
  CC=${CC:-cc}
  cd "${srcdir}"
  for _pfx in "${!_cross_arches[@]}"; do
    if [[ "${_pfx}" != "${MINGW_PREFIX}" ]]; then
      $CC $CFLAGS $LDFLAGS -DDEFAULT_TARGET=\"${_cross_arches[$_pfx]}\" ../windres-wrapper.c -o ${_cross_arches[$_pfx]}-windres.exe
    fi
  done
}
_real_package() {
  local _pfx="@@@PREFIX@@@"
  depends=("${MINGW_PACKAGE_PREFIX}-clang=${pkgver}-${pkgrel}"
           "${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}"
           "${MINGW_PACKAGE_PREFIX}-lld=${pkgver}-${pkgrel}"
           "mingw-w64-clang-${_cross_arches[@@@PREFIX@@@]%%-*}-compiler-rt=${pkgver}-${pkgrel}"
           "mingw-w64-clang-${_cross_arches[@@@PREFIX@@@]%%-*}-crt"
           "mingw-w64-clang-${_cross_arches[@@@PREFIX@@@]%%-*}-headers"
           "mingw-w64-clang-${_cross_arches[@@@PREFIX@@@]%%-*}-libc++=${pkgver}-${pkgrel}"
           "mingw-w64-clang-${_cross_arches[@@@PREFIX@@@]%%-*}-libunwind=${pkgver}-${pkgrel}")

  local _resourcever="$(basename "$(clang -print-resource-dir)")"
  mkdir -p "${pkgdir}/${MINGW_PREFIX}/bin"
  for tool in as cc clang gas gcc; do
    printf "#!/bin/bash\n\n${MINGW_PREFIX}/bin/clang -target ${_cross_arches[${_pfx}]} --sysroot=${_pfx} -resource-dir=${_pfx}/lib/clang/${_resourcever} \"\$@\"" > "${pkgdir}/${MINGW_PREFIX}/bin/${_cross_arches[${_pfx}]}-${tool}"
  done
  for tool in c++ clang++ g++; do
    printf "#!/bin/bash\n\n${MINGW_PREFIX}/bin/clang++ -target ${_cross_arches[${_pfx}]} --sysroot=${_pfx} -resource-dir=${_pfx}/lib/clang/${_resourcever} \"\$@\"" > "${pkgdir}/${MINGW_PREFIX}/bin/${_cross_arches[${_pfx}]}-${tool}"
  done
  cp "${srcdir}/${_cross_arches[${_pfx}]}-windres.exe" "${pkgdir}/${MINGW_PREFIX}/bin/${_cross_arches[${_pfx}]}-windres.exe"
  mkdir -p "${pkgdir}${MINGW_PREFIX}/share/licenses/${_cross_arches[${_pfx}]}-windres"
  cp "${srcdir}/windres.LICENSE" "${pkgdir}${MINGW_PREFIX}/share/licenses/${_cross_arches[${_pfx}]}-windres/LICENSE"
}

_func="$(declare -f "_real_package")"
for _pfx in "${!_cross_arches[@]}"; do
  if [[ "${_pfx}" != "${MINGW_PREFIX}" ]]; then
    _func2="${_func//@@@PREFIX@@@/${_pfx}}"
    eval "${_func2/#_real_package/package_${MINGW_PACKAGE_PREFIX}-cross-clang-${_cross_arches[$_pfx]%%-*}}"
  fi
done
